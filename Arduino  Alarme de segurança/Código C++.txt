#define LDR_PIN A0
#define TMP36_PIN A1
#define BUZZER_PIN 8
#define LED_PIN 9
#define BUTTON_PIN_1 2
#define BUTTON_PIN_2 3
#define BUTTON_PIN_3 4
#define BUTTON_PIN_4 5
#define LCD_RS 10
#define LCD_EN 11
#define LCD_D4 12
#define LCD_D5 13
#define LCD_D6 A2
#define LCD_D7 A3

const int correctCode[4] = {1, 2, 3, 4}; // Código de segurança correto
int enteredCode[4] = {0, 0, 0, 0};       // Código inserido
int codeIndex = 0;                       // Índice do código inserido
bool codeCorrect = false;
int threshold = 500; // Valor de luminosidade para detectar abertura
float criticalHighTemp = 40.0; // Temperatura crítica alta
float criticalLowTemp = 0.0;   // Temperatura crítica baixa

void setup() {
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUTTON_PIN_1, INPUT_PULLUP);
  pinMode(BUTTON_PIN_2, INPUT_PULLUP);
  pinMode(BUTTON_PIN_3, INPUT_PULLUP);
  pinMode(BUTTON_PIN_4, INPUT_PULLUP);

  pinMode(LCD_RS, OUTPUT);
  pinMode(LCD_EN, OUTPUT);
  pinMode(LCD_D4, OUTPUT);
  pinMode(LCD_D5, OUTPUT);
  pinMode(LCD_D6, OUTPUT);
  pinMode(LCD_D7, OUTPUT);

  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  lcdBeginInator();
  lcdPrintInator("Sistema FIEMT");

  Serial.begin(9600);
}

void loop() {
  int ldrValue = analogRead(LDR_PIN);
  float temperature = readTemperature(TMP36_PIN);

  lcdSetCursor(0, 0);
  lcdPrintInator("Temp: ");
  lcdPrintInator(temperature);
  lcdPrintInator(" C   ");

  bool alarmTriggered = false;

  if (ldrValue > threshold && !codeCorrect) {
    alarmTriggered = true;
    lcdSetCursor(0, 1);
    lcdPrintInator("Alerta! LDR: ");
    lcdPrintInator(ldrValue);
    lcdPrintInator("    ");
  } else if (temperature > criticalHighTemp || temperature < criticalLowTemp) {
    alarmTriggered = true;
    lcdSetCursor(0, 1);
    lcdPrintInator("Temp. Critica ");
  } else {
    lcdSetCursor(0, 1);
    lcdPrintInator("Seguro            ");
  }

  if (alarmTriggered) {
    tone(BUZZER_PIN, 500); // Emitir som contínuo com frequência de 500Hz
    digitalWrite(LED_PIN, HIGH);
  } else {
    noTone(BUZZER_PIN);
    digitalWrite(LED_PIN, LOW);
  }

  if (digitalRead(BUTTON_PIN_1) == LOW) {
    enteredCode[codeIndex++] = 1;
    delay(200);
  } else if (digitalRead(BUTTON_PIN_2) == LOW) {
    enteredCode[codeIndex++] = 2;
    delay(200);
  } else if (digitalRead(BUTTON_PIN_3) == LOW) {
    enteredCode[codeIndex++] = 3;
    delay(200);
  } else if (digitalRead(BUTTON_PIN_4) == LOW) {
    enteredCode[codeIndex++] = 4;
    delay(200);
  }

  if (codeIndex == 4) {
    codeCorrect = checkCode();
    codeIndex = 0; // Resetar índice para próxima tentativa
  }

  delay(100);
}

float readTemperature(int pin) {
  int reading = analogRead(pin);
  float voltage = reading * 5.0 / 1024.0;
  float temperatureC = (voltage - 0.5) * 100;
  return temperatureC;
}

bool checkCode() {
  for (int i = 0; i < 4; i++) {
    if (enteredCode[i] != correctCode[i]) {
      // Código incorreto, resetar o código inserido
      for (int j = 0; j < 4; j++) {
        enteredCode[j] = 0;
      }
      return false;
    }
  }
  // Código correto, resetar o código inserido
  for (int j = 0; j < 4; j++) {
    enteredCode[j] = 0;
  }
  return true;
}

void lcdSendNibble(byte data) {
  digitalWrite(LCD_D4, data & 0x01);
  digitalWrite(LCD_D5, data & 0x02);
  digitalWrite(LCD_D6, data & 0x04);
  digitalWrite(LCD_D7, data & 0x08);
  digitalWrite(LCD_EN, HIGH);
  delayMicroseconds(1);
  digitalWrite(LCD_EN, LOW);
}

void lcdSendByte(byte data, byte mode) {
  digitalWrite(LCD_RS, mode);
  lcdSendNibble(data >> 4);
  lcdSendNibble(data);
  delayMicroseconds(100);
}

void lcdBeginInator() {
  delay(15);
  lcdSendNibble(0x03);
  delay(5);
  lcdSendNibble(0x03);
  delayMicroseconds(150);
  lcdSendNibble(0x03);
  lcdSendNibble(0x02);
  lcdSendByte(0x28, LOW);  // Function set: 4-bit, 2 line, 5x8 dots
  lcdSendByte(0x08, LOW);  // Display off
  lcdSendByte(0x01, LOW);  // Clear display
  lcdSendByte(0x06, LOW);  // Entry mode set
  lcdSendByte(0x0C, LOW);  // Display on, cursor off, blink off
}

void lcdSetCursor(byte col, byte row) {
  byte rowOffsets[] = {0x00, 0x40, 0x14, 0x54};
  lcdSendByte(0x80 | (col + rowOffsets[row]), LOW);
}

void lcdPrintInator(const char *str) {
  while (*str) {
    lcdSendByte(*str++, HIGH);
  }
}

void lcdPrintInator(float value) {
  char buffer[10];
  dtostrf(value, 6, 2, buffer);
  lcdPrintInator(buffer);
}
